import logging
from aiogram import Router,F
from aiogram import types
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
import dbWorker
from aiogram.fsm.state import StatesGroup, State
from cfg import DB_PATH
import matcher
import json
r = Router()
db = dbWorker.dataBaseWorker(DB_PATH)
logging.basicConfig(level=logging.INFO)
users = db.getUsers()


class Register(StatesGroup):
    waitingForKey = State()
    waitingForUserName = State()
    waitingForPassword = State()


class Login(StatesGroup):
    waitingForLogin = State()
    waitingForPassword = State()


class CreateSubject(StatesGroup):
    waitingForSubjectName = State()


class DeleteSubject(StatesGroup):
    waitingForDeletingSubject = State()


class CreateTask(StatesGroup):
    pass


class EditTask(StatesGroup):
    waitingForDescription = State()
    waitingForDate = State()
    waitingForBoth = State()


class AddAlias(StatesGroup):
    waitingForSubjectNAlias = State()
    waitingForSubject = State()
    waitingForAlias = State()


class Notify(StatesGroup):
    waitingForMessage = State()


#-------------------MISC-------------------
@r.message(Command("notify"),F.from_user.id==799100592)
async def notifyAll(message: types.Message, state: FSMContext):
    await message.answer("–û—Ç–ø—Ä–∞–≤—å —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –≤—Å–µ—Ö")
    await state.set_state(Notify.waitingForMessage)


@r.message(Notify.waitingForMessage)
async def notify(message: types.Message, state: FSMContext):
    await state.update_data(msg = message.text)
    buttons = [[types.InlineKeyboardButton(text = "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å",callback_data="ACCEPTNOTIFICATION 0"),
               types.InlineKeyboardButton(text = "–û—Ç–º–µ–Ω–∏—Ç—å",callback_data="CANCEL"),
               types.InlineKeyboardButton(text = "–ò–∑–º–µ–Ω–∏—Ç—å",callback_data="ACCEPTNOTIFICATION 1")]]
    kb = types.InlineKeyboardMarkup(inline_keyboard=buttons)
    await message.answer(message.text, reply_markup=kb)


@r.callback_query(F.data.startswith("ACCEPTNOTIFICATION"))
async def sendNotification(data: types.CallbackQuery, state: FSMContext):
    mode = int(data.data.split()[1])
    user_data = await state.get_data()
    msg = user_data["msg"]
    if mode == 0:
        await data.message.edit_text("–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
        for chat_id in db.getUserIDS():
            await data.bot.send_message(chat_id, msg)
        return
    await data.message.delete()
    await notifyAll(data.message, state)


@r.message(Command("start"))
async def start(message: types.Message, state: FSMContext):
    await message.answer("–ü—Ä–∏–≤–µ—Ç, –µ—Å–ª–∏ —É —Ç–µ–±—è —É–∂–µ –µ—Å—Ç—å —É—á–µ—Ç–Ω–∞—è –∑–∞–ø–∏—Å—å, –Ω–∞–ø–∏—à–∏ /login, –∏–Ω–∞—á–µ /register, –¥–ª—è –æ—Ç–º–µ–Ω—ã –¥–µ–π—Å—Ç–≤–∏—è /cancel")

@r.message(Command("help"))
async def help(message: types.Message, state: FSMContext):
    await message.answer("""
    –†–∞—Å—Å–∫–∞–∂—É –∫–æ—Ä–æ—Ç–∫–æ –æ–±–æ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–µ–±–µ –∫–æ–º–∞–Ω–¥–∞—ÖüòÅ
    
    –ü—Ä–µ–¥–º–µ—Ç—ã
    /newsub (–Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞) - –¥–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤—ã–π –ø—Ä–µ–¥–º–µ—Ç –¥–ª—è —Ç–µ–±—è –∏ —Ç–≤–æ–µ–π –≥—Ä—É–ø–ø—ãü•≤
    /delsub - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é, –≤—ã–±—Ä–∞–≤ —ç–ª–µ–º–µ–Ω—Ç –∫–æ—Ç–æ—Ä–æ–≥–æ –±—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –ø—Ä–µ–¥–º–µ—Ç
    /addalias - –¥–æ–±–∞–≤–ª—è–µ—Ç —Å–∏–Ω–æ–Ω–∏–º –¥–ª—è –ø—Ä–µ–¥–º–µ—Ç–∞, —á—Ç–æ–±—ã —Ç—ã –º–æ–≥ –Ω–∞–ø–∏—Å–∞—Ç—å –∫–∞–∫ –ª–∏–Ω–∞–ª, —Ç–∞–∫ –∏ –ª–∏–Ω–µ–π–∫–∞ –∏–ª–∏ –õ–∏–ù–µ–ô–Ω–ê—è –ê–ª–ì–µ–ë—Ä–∞ü§ì
    /listsubs - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–µ–¥–º–µ—Ç—ã
    
    –ó–∞–¥–∞—á–∏
    /deltask - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é, –≤—ã–±—Ä–∞–≤ —ç–ª–µ–º–µ–Ω—Ç –∫–æ—Ç–æ—Ä–æ–≥–æ –±—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ –∑–∞–¥–∞–Ω–∏–µ
    /edittask - –ø–æ–∑–≤–æ–ª—è–µ—Ç –∏–∑–º–µ–Ω–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ –∑–∞–¥–∞–Ω–∏–µ
    /setcomplete - –æ—Ç–º–µ—á–∞–µ—Ç –∑–∞–¥–∞—á—É, –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—É—é
    /listtasks - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—Å—é –¥–æ–º–∞—à–∫—É
    /cancel - –æ—Ç–º–µ–Ω—è–µ—Ç —Ç–µ–∫—É—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ
    
    
    –ß—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –¥–æ–º–∞—à–∫—É –æ—Ç–ø—Ä–∞–≤—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Å–ª–µ–¥—É—é—â–µ–º —Ñ–æ—Ä–º–∞—Ç–µ:
    –î–æ–±–∞–≤—å (–Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞) –Ω–∞ (–¥–∞—Ç–∞ –≤–∏–¥–∞ –î–î.–ú–ú) (—Ç–µ–∫—Å—Ç –∑–∞–¥–∞–Ω–∏—è)
    –ù–∞–ø—Ä–∏–º–µ—Ä: –î–æ–±–∞–≤—å –º–∞—Ç–∞–Ω –Ω–∞ 18.10 –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω–æ–π
    """)
    pass


@r.message(Command("cancel"))
async def cancel(message: types.Message, state: FSMContext):
    await state.clear()
    await message.answer("–¢–µ–∫—É—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æüóëÔ∏è")
    return
  

@r.callback_query(F.data.startswith("CANCEL"))
async def cancelKB(data: types.CallbackQuery, state: FSMContext):
    await data.message.edit_text("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")
    await state.clear()
#------------------END------------------



    
#------------------REGISTATION------------------
@r.message(Command("register"))
async def registerNewUser(message: types.Message, state: FSMContext):
    await state.clear()
    if db.isUserTG(message.chat.id):
        await message.answer("–í—ã —É–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ãüòå")
        await help(message, state)
        return
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–ª—é—á –¥–æ—Å—Ç—É–ø–∞ –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ãüôÉ\n–ù–∞–ø–∏—à–∏—Ç–µ /login,–µ—Å–ª–∏ —É –≤–∞—Å —É–∂–µ –µ—Å—Ç—å —É—á–µ—Ç–Ω–∞—è –∑–∞–ø–∏—Å—å")
    await state.set_state(Register.waitingForKey)


@r.message(Register.waitingForKey)
async def verifyKey(message: types.Message, state: FSMContext):
    if not db.verifyOneTimeKey(message.text):
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π –∫–ª—é—á, –ø–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑üôÑ")
    else:
        await state.update_data(usedKey = message.text)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
                      "\n–ù–∞–ø—Ä–∏–º–µ—Ä: Adskiy_Botan"
                      "\n–ù–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª—ã –∏ –ø—Ä–æ–±–µ–ª—ã"
                      "\n–î–ª–∏–Ω–∞ –¥–æ 64 —Å–∏–º–≤–æ–ª–æ–≤")
        await state.set_state(Register.waitingForUserName)


@r.message(Register.waitingForUserName)
async def setUpUserName(message: types.Message, state: FSMContext):
    if not matcher.isUserNameValid(message.text):
        await message.answer("–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º‚òπÔ∏è")
        return
    await state.update_data(userName = message.text)
    await message.answer("–ü—Ä–∏–¥—É–º–∞–π—Ç–µ —Å–ª–æ–∂–Ω—ã–π –ø–∞—Ä–æ–ª—å (–Ω–µ –º–µ–Ω–µ–µ 8 —Å–∏–º–≤–æ–ª–æ–≤)ü§ì")
    await state.set_state(Register.waitingForPassword)


@r.message(Register.waitingForPassword)
async def setUpPassword(message: types.Message, state: FSMContext):
    if not matcher.isPasswordValid(message.text):
        await message.answer("–ü–∞—Ä–æ–ª—å —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π üçÜ ü´°")
        return
    await message.delete()
    userData = await state.get_data()
    db.delOneTimeKey(userData["usedKey"])
    db.addUser(userData["userName"], message.chat.id, message.text, 0)
    global users
    users.append(message.chat.id)
    await message.answer("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æüòé")
    await help(message, state)
    await state.clear()
#------------------END------------------




#------------------LOGIN------------------
@r.message(Command("login"))
async def login(message: types.Message, state: FSMContext):
    await state.clear()
    if db.isUserTG(message.chat.id):
        await message.answer("–í—ã —É–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã")
        await help(message, state)
        return
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω")
    await state.set_state(Login.waitingForLogin)


@r.message(Login.waitingForLogin)
async def parseLogin(message: types.Message, state: FSMContext):
    if not db.isUserNAME(message.text):
        await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω‚ùé\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑")
        return
    await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω‚úÖ\n–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å")
    await state.update_data(userName = message.text)
    await state.set_state(Login.waitingForPassword)


@r.message(Login.waitingForPassword)
async def parsePassword(message: types.Message, state: FSMContext):
    userData = await state.get_data()
    if not db.checkPassword(userData["userName"],message.text):
        await message.answer("–ü–∞—Ä–æ–ª—å –Ω–µ–≤–µ—Ä–Ω—ã–πü´§")
        return
    db.addTelegramToExisting(message.chat.id,userData["userName"])
    await message.delete()
    await message.answer("–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æüôÉ")
    await help(message, state)
    await state.clear()
    return
#------------------END------------------




#------------------Task------------------
@r.message(F.text.lower().startswith("–¥–æ–±–∞–≤—å"),F.from_user.id.in_(users))
async def addTask(message: types.Message, state: FSMContext):
    res = matcher.prepareTask(message.text)
    if res[0]==None:
        await message.answer("–ü—Ä–µ–¥–º–µ—Ç –Ω–µ —É–∫–∞–∑–∞–Ω –∏–ª–∏ —É–∫–∞–∑–∞–Ω –Ω–µ–≤–µ—Ä–Ω–æ")
        return
    elif res[1]==None:
        await message.answer("–î–∞—Ç–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞ –∏–ª–∏ —É–∫–∞–∑–∞–Ω–∞ –Ω–µ–≤–µ—Ä–Ω–æ")
        return
    elif res[2]==None:
        await message.answer("–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è –∑–∞–¥–∞—á–∏")
        return
    elif not db.isSubjectExists(res[0].group().capitalize()):
        await message.answer("–¢–∞–∫–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞ –Ω–µ—Ç")
        return
    subject,date,description = res[0].group().capitalize(), res[1].group(), res[2].group().capitalize()
    db.addTask(subject,date,description)
    await message.answer(f"–ù–∞ {date} —á–∏—Å–ª–æ –ø–æ –ø—Ä–µ–¥–º–µ—Ç—É {subject} –¥–æ–±–∞–≤–ª–µ–Ω–æ –∑–∞–¥–∞–Ω–∏–µ {description}")
    return


@r.message(Command("deltask"),F.from_user.id.in_(users))
async def prepToDelTask(message: types.Message, state: FSMContext):
    tasks = db.getTasks(db.getUserNameByTGID(message.from_user.id))
    buttons = [[types.InlineKeyboardButton(text = i[1],callback_data=f"DT {i[0]}")] for i in tasks]
    buttons+= [[types.InlineKeyboardButton(text = "–û—Ç–º–µ–Ω–∞", callback_data="CANCEL")]]
    kb = types.InlineKeyboardMarkup(inline_keyboard=buttons)
    if len(tasks)!=0: await message.answer("–í—ã–±–µ—Ä–∏ –∑–∞–¥–∞–Ω–∏–µ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è",reply_markup=kb)
    else: await message.answer("–ó–∞–¥–∞–Ω–∏–π –Ω–µ—ÇüòÅ")


@r.callback_query(F.data.startswith("DT"))
async def delTask(data: types.CallbackQuery):
    taskID = int(data.data.split()[1])
    db.delTask(taskID)
    await data.message.edit_text("–ó–∞–¥–∞–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æüòé")


@r.message(Command("listtasks"),F.from_user.id.in_(users))
async def displayTasks(message: types.Message, state: FSMContext):
    txt = db.getUncompletedTasks(db.getUserNameByTGID(message.from_user.id))
    await message.answer("–ó–∞–¥–∞—á–∏:\n"+txt)


@r.message(Command("edittask"),F.from_user.id.in_(users))
async def prepToEditTask(message: types.Message, state: FSMContext):
    tasks = db.getTasks(db.getUserNameByTGID(message.from_user.id))
    buttons = [[types.InlineKeyboardButton(text=i[1], callback_data=f"ETST {i[0]}")] for i in tasks]
    buttons += [[types.InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞", callback_data="CANCEL")]]
    kb = types.InlineKeyboardMarkup(inline_keyboard=buttons)
    if len(tasks)!=0: await message.answer("–í—ã–±–µ—Ä–∏ –∑–∞–¥–∞–Ω–∏–µ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—èüò∂",reply_markup=kb)
    else: await message.answer("–ù–µ—á–µ–≥–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å, –≤—Å–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ!ü•≥")


@r.callback_query(F.data.startswith("ETST"))
async def editTask(data: types.CallbackQuery, state: FSMContext):
    ID = int(data.data.split()[1])
    buttons = [[types.InlineKeyboardButton(text = i, callback_data = f"ETET {a}")] for a,i in enumerate(["–æ–ø–∏—Å–∞–Ω–∏–µ","–¥–∞—Ç–∞"])]
    buttons += [[types.InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞",callback_data="CANCEL")]]
    kb = types.InlineKeyboardMarkup(inline_keyboard=buttons)
    await data.message.delete()
    await state.update_data(taskID = ID)
    await data.message.answer("–ß—Ç–æ —Ç—ã —Ö–æ—á–µ—à—å –∏–∑–º–µ–Ω–∏—Ç—å?",reply_markup=kb)


@r.callback_query(F.data.startswith("ETET"))
async def selectEditingParameter(data: types.CallbackQuery, state: FSMContext):
    editingType = int(data.data.split()[1])
    await data.message.delete()
    if editingType == 0:
        await data.message.answer("–í–≤–µ–¥–∏ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏üó£")
        await state.set_state(EditTask.waitingForDescription)
    elif editingType == 1:
        await data.message.answer("–í–≤–µ–¥–∏ –Ω–æ–≤—ã–π –¥–µ–¥–ª–∞–π–Ω –∑–∞–¥–∞—á–∏üìÜ")
        await state.set_state(EditTask.waitingForDate)

@r.message(EditTask.waitingForDescription)
async def editTaskDescription(message: types.Message, state: FSMContext):
    userData = await state.get_data()
    db.updateTask(task_id = userData["taskID"],description=message.text.capitalize())
    await message.answer("–ó–∞–¥–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ")
    await state.clear()


@r.message(EditTask.waitingForDate)
async def editTaskDate(message: types.Message, state: FSMContext):
    if not matcher.isDateValid(message.text):
        await message.answer("–¢—ã –≤–≤–µ–ª –¥–∞—Ç—É –≤ –Ω–µ–≤–µ—Ä–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µü§°"); return
    data = await state.get_data()
    db.updateTask(task_id = data["taskID"], date = message.text.capitalize())
    await message.answer("–ó–∞–¥–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æüòµ‚Äçüí´")
    await state.clear()


@r.message(Command("setcomplete"),F.from_user.id.in_(users))
async def prepToMarkAsComplete(message: types.Message, state: FSMContext):
    tasks = db.getTasks(db.getUserNameByTGID(message.from_user.id))
    buttons = [[types.InlineKeyboardButton(text=x[1], callback_data=f"MC {x[0]}")] for x in tasks]
    buttons += [[types.InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞",callback_data="CANCEL")]]
    kb = types.InlineKeyboardMarkup(inline_keyboard=buttons)
    await message.answer("–í—ã–±–µ—Ä–∏ –∑–∞–¥–∞–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –Ω—É–∂–Ω–æ –æ—Ç–º–µ—Ç–∏—Ç—å –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–µ",reply_markup=kb)

@r.callback_query(F.data.startswith("MC"))
async def MarkAsComplete(data: types.CallbackQuery, state: FSMContext):
    taskID = int(data.data.split()[1])
    db.markAsComplete(taskID, db.getUserNameByTGID(data.from_user.id))
    await data.message.delete()
    await data.message.answer("–ú–æ–ª–æ–¥–µ—Ü, –∑–∞–¥–∞–Ω–∏–µ –≤—ã—á–µ—Ä–∫–Ω—É—Ç–æ –∏–∑ —Å–ø–∏—Å–∫–∞ –¥–µ–ª‚úçÔ∏è")
#------------------END------------------




#------------------Subject------------------
@r.message(Command("newsub"),F.from_user.id.in_(users))
async def addSubject(message: types.Message, state: FSMContext):
    t = message.text
    if len(t.split())==1:
        await message.answer("–í–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞ü•∏")
        await state.set_state(CreateSubject.waitingForSubjectName)
        return
    else:
        name = matcher.prepareSub(t).lower()
        db.addSub(name)
        await message.answer(f"–ü—Ä–µ–¥–º–µ—Ç {name} –¥–æ–±–∞–≤–ª–µ–Ωü•≤")


@r.message(CreateSubject.waitingForSubjectName)
async def addSubjectByName(message: types.Message, state: FSMContext):
    t = message.text.lower()
    db.addSub(t)
    await message.answer(f"–ü—Ä–µ–¥–º–µ—Ç {t} –¥–æ–±–∞–≤–ª–µ–Ωü•≤")
    await state.clear()


@r.message(Command("delsub"),F.from_user.id.in_(users))
async def prepToDelSubject(message: types.Message, state: FSMContext):
    subjects = db.getSubjectNamesAndIDs()
    buttons = [[types.InlineKeyboardButton(text = i[1], callback_data=f"DS {i[0]}")] for i in subjects]
    buttons += [[types.InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞", callback_data="CANCEL")]]
    kb = types.InlineKeyboardMarkup(inline_keyboard=buttons)
    await message.answer("–í—ã–±–µ—Ä–∏ –ø—Ä–µ–¥–º–µ—Ç –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—èü´†",reply_markup=kb)


@r.message(AddAlias.waitingForSubjectNAlias)
async def addAlias(message: types.Message, state: FSMContext):
    if not matcher.isAliasStringValid(message.text):
        await message.answer("–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞ –∏ —Å–∏–Ω–æ–Ω–∏–º –Ω–∞–¥–æ –ø–∏—Å–∞—Ç—å —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é –≤ –æ–¥–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ü§°")
        return
    subject_name, alias = matcher.prepareAlias(message.text)
    reply = db.isAliasValid(subject_name, alias)
    if reply==0:
        db.addAlias(subject_name,alias)
        await message.answer(f"–î–æ–±–∞–≤–ª–µ–Ω —Å–∏–Ω–æ–Ω–∏–º {alias} –¥–ª—è –ø—Ä–µ–¥–º–µ—Ç–∞ {subject_name}")
        await state.clear()
        return
    elif reply==1: await message.answer("–¢–∞–∫–æ–π –ø—Ä–µ–¥–º–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
    elif reply==2: await message.answer("–¢–∞–∫–æ–π —Å–∏–Ω–æ–Ω–∏–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")


@r.callback_query(F.data.startswith("DS"),F.from_user.id.in_(users))
async def delSubject(data:types.CallbackQuery):
    subject = int(data.data.split()[1])
    db.delSubByID(subject)
    await data.message.edit_text(f"–ü—Ä–µ–¥–º–µ—Ç —É–¥–∞–ª–µ–ΩüòÅ",reply_markup=None)


@r.message(Command("addalias"),F.from_user.id.in_(users))
async def startAddAlias(message: types.Message, state: FSMContext):
    await message.answer("–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞, –¥–ª—è –∫–æ—Ç–æ—Ä–æ–≥–æ —Ç—ã —Ö–æ—á–µ—à—å –¥–æ–±–∞–≤–∏—Ç—å —Å–∏–Ω–æ–Ω–∏–º,\n–ò —Å–∞–º —Å–∏–Ω–æ–Ω–∏–º –≤ –æ–¥–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é)ü§Ø")
    await state.set_state(AddAlias.waitingForSubjectNAlias)
#------------------END------------------

@r.message(Command("listsubs"),F.from_user.id.in_(users))
async def listsubs(message: types.Message, state: FSMContext):
    subs = db.getSubjectNamesAndAliases()
    l = '\n'.join([f"{i[0].capitalize()} aka " + ', '.join(json.loads(i[1])) for i in subs])
    await message.answer(l)